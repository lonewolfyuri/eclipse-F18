# Submitter: Ggabrich(Gabricht, George)

import prompt,re
import math
from goody import type_as_str

class Point:
    def __init__(self, x:int, y:int, z:int) -> None:
        assert type(x) == int and type(y) == int and type(z) == int, f'{type_as_str(self)}.__init__: requires 3 int values as arguments.'
        self.x, self.y, self.z = x, y, z
    
    
    def __repr__(self) -> str: return f'Point({self.x},{self.y},{self.z})'
    
    
    def __str__(self) -> str: return f'(x={self.x},y={self.y},z={self.z})'
    
    
    def __bool__(self) -> bool: return False if (self.x==0 and self.y==0 and self.z==0) else True
    
    
    def __add__(self, right) -> Point:
        if type(right) != Point: raise TypeError(f'{type_as_str(Point)}.__add__: cannot add Point type and {type_as_str(right)} type')
        else: return Point(self.x+right.x, self.y+right.y, self.z+right.z)
    
    
    def __lt__(self, right) -> bool:
        if type(right) != Point: raise TypeError(f'{type_as_str(Point)}.__lt__: cannot compare Point type and {type_as_str(right)} type')
        return self.distance(Point(0,0,0)) < right.distance(Point(0,0,0))


if __name__ == '__main__':
    #Simple tests before running driver
    #Put your own test code here to test Point before doing bsc tests

    print('Start simple testing')
    
    print()
    import driver
    
    driver.default_file_name = 'bscq31F18.txt'
#     driver.default_show_traceback = True
#     driver.default_show_exception = True
#     driver.default_show_exception_message = True
    driver.driver()
