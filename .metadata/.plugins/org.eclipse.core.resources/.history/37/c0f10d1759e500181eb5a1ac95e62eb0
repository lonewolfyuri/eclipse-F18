# Submitter: ggabrich(Gabricht, George)

import re, traceback, keyword

def pnamedtuple(type_name, field_names, mutable= False):
    def show_listing(s):
        for line_num, line_text in enumerate(s.split('\n'), 1):
            print(f' {line_num: >3} {line_text.rstrip()}')

    # put your code here
    # bind class_definition (used below) to the string constructed for the class
    def unique(iterable):
        iterated = set()
        for i in iterable:
            if i not in iterated:
                iterated.add(i)
                yield i
    
    reg = re.compile('[a-zA-Z][a-zA-Z0-9_]*')
    if not reg.match(str(type_name)): raise SyntaxError(f'{__name__}.pnamedtuple: please enter a valid type_name instead of {type_name}.')
    elif type_name in keyword.kwlist: raise SyntaxError(f'{__name__}.pnamedtuple: entered type_name {type_name} is a Python keyword.')
    
    _fields = []
    
    if type(field_names) is not list: 
        if type(field_names) is not str: raise SyntaxError(f'{__name__}.pnamedtuple: please enter fields in str or list')
        else: _fields += list(unique(re.split('(?:, *)|(?: +)',field_names)))
    else: _fields += [item for item in unique(field_names)]
    
    for item in _fields:
        if not reg.match(item): raise SyntaxError(f'{__name__}.pnamedtuple: please enter a valid field name instead of {item}.')
        elif item in keyword.kwlist: raise SyntaxError(f'{__name__}.pnamedtuple: entered field name {item} is a Python keyword.')
    
    '''
    class Point:
        def init(self, a, b, c):
            self._fields = ['a', 'b', 'c']
            self.a = a
            self.b = b
            self.c = c
            self._mutable = False
    '''
    
    def gen_init(attrs: [str]) -> str:
        result = []
        for val in attrs:
            result.append(f'self.__dict__[{str(val)]} = {val}\n\
        ')
        return f"def __init__(self, {', '.join(attrs)}):\n\
        self.__dict__['_fields'] = {attrs}\n\
        {''.join(result)}self._mutable = {mutable}\n"
    
    def gen_access(attrs: [str]) -> str:
        result = []
        for val in attrs:
            result.append(\
    f"def get_{val}(self):\n\
        return self.{val}\n\
\n\
    ")
        return ''.join(result)
    
    def gen_item(attrs: [str]) -> str:
        return f"def __getitem__(self, index):\n\
        if type(index) is int and (index < 0 or index >= len(attrs)):\n\
            raise IndexError('{type_name}.__getitem__: Please enter a valid index.')\n\
        elif type(index) is str and index not in self.__dict__:\n\
            raise IndexError('{type_name}.__getitem__: Please enter a valid index.')\n\
        return eval('self.get_' + str(self._fields[index]) + '()')"
    
    def gen_eq() -> str:
        return f"def __eq__(self, right) -> bool:\n\
        if type(self) == type(right):\n\
            for ndx in range(len(self._fields)):\n\
                if self[ndx] != right[ndx]:\n\
                    return False\n\
            return True\n\
        return False"
    
    def gen_replace(type_name: str) -> str:
        return f"def _replace(self, **kargs):\n\
        for key in kargs:\n\
            if key not in self._fields: raise TypeError('{type_name}._replace: all replaced fields must already be attr of {type_name} object.')\n\
        if self._mutable:\n\
            for key, val in kargs.items():\n\
                self.__dict__[key] = val\n\
            return None\n\
        else:\n\
            result = []\n\
            for item in self._fields:\n\
                if item in kargs: result.append(kargs[item])\n\
                else: result.append(self[item])\n\
            return eval('{type_name}(','.join(result))')"
    
    def gen_setattr() -> str:
        return f"def __setattr__(self, name, val) -> None:\n\
        if self._mutable: self.__dict__[name] = val"
    
    class_definition = f'''\
class {type_name}:
    {gen_init(_fields)}
    def __repr__(self) -> str:
        return "{type_name}({','.join([f'{val}={val}' for val in _fields])})"
    
    {gen_access(_fields)}
    {gen_item(_fields)}
    
    {gen_eq()}
    
    {gen_replace(type_name)}
    
    {gen_setattr()}
'''
    
    # While debugging, remove comment below showing source code for the class
    # show_listing(class_definition)
    
    # Execute this class_definition str in a local name space; then, bind the
    #   source_code attribute to class_defintion; after that try, return the
    #   class object created; if there is a syntax error, list the class and
    #   also show the error
    name_space = dict(__name__  =  f'pnamedtuple_{type_name}')
    try:
        exec(class_definition,name_space)
        name_space[type_name].source_code = class_definition
    except (TypeError,SyntaxError):   
        show_listing(class_definition)
        traceback.print_exc()
    return name_space[type_name]


    
if __name__ == '__main__':
    # Test pnamedtuple in script below: use Point = pnamedtuple('Point','x,y')
    point = pnamedtuple('Point', 'x y')
    p1 = point(1,4)
    print(repr(p1))
    #driver tests
    import driver
    driver.default_file_name = 'bscp3S18.txt'
#     driver.default_show_exception= True
#     driver.default_show_exception_message= True
#     driver.default_show_traceback= True
    driver.driver()
