# Submitter: Ggabrich(Gabricht, George)

import prompt,re
import math
from goody import type_as_str

class Point:
    def __init__(self, x:int, y:int, z:int) -> None:
        assert all((type(x) == int, type(y) == int, type(z) == int)), f'{type_as_str(self)}.__init__: requires 3 int values as arguments.'
        self.x, self.y, self.z = x, y, z
    
    
    def __repr__(self) -> str: return f'Point({self.x},{self.y},{self.z})'
    
    
    def __str__(self) -> str: return f'(x={self.x},y={self.y},z={self.z})'
    
    
    def __bool__(self) -> bool: return not all(v==0 for v in (self.x, self.y, self.z))
    
    
    def __add__(self, right):
        if type(right) is Point: return Point(self.x+right.x, self.y+right.y, self.z+right.z)
        else: raise TypeError(f'{type_as_str(self)}.__add__: cannot add Point type and {type_as_str(right)} type')
    
    
    def __mul__(self, right:int):
        if type(right) is int: return Point(self.x*right, self.y*right, self.z*right)
        else: raise TypeError(f'{type_as_str(self)}.__mul__: cannot multiply Point type and {type_as_str(right)} type')
    
    
    def __rmul__(self, left:int):
        if type(left) is int: return Point(self.x*left, self.y*left, self.z*left)
        else: raise TypeError(f'{type_as_str(self)}.__rmul__: cannot multiply Point type and {type_as_str(left)} type')
    
    
    def __lt__(self, right) -> bool:
        if type(right) in (int,float): return (self.distance(Point(0,0,0)) < right)
        elif type(right) is Point: return (self.distance(Point(0,0,0)) < right.distance(Point(0,0,0)))
        else: raise TypeError(f'{type_as_str(self)}.__lt__: cannot compare Point type and {type_as_str(right)} type')
    
    
    '''def __gt__(self, right) -> bool:
        if type(right) in (int,float): return (self.distance(Point(0,0,0)) > right)
        elif type(right) is Point: return (self.distance(Point(0,0,0)) > right.distance(Point(0,0,0)))
        else: raise TypeError(f'{type_as_str(self)}.__lt__: cannot compare Point type and {type_as_str(right)} type')'''
    
    
    def __getitem__(self, index) -> int:
        if type(index) in (int, str):
            if index in (0,'x'): return self.x
            elif index in (1,'y'): return self.y
            elif index in (2,'z'): return self.z
            else: raise IndexError(f'{type_as_str(self)}.__getitem__: {index} is not a valid index')
        else: raise IndexError(f'{type_as_str(self)}.__getitem__: {type_as_str(index)} is not a valid index type')
    
    
    def __call__(self, x:int, y:int, z:int) -> None:
        assert all((type(x) == int, type(y) == int, type(z) == int)), f'{type_as_str(self)}.__call__: requires 3 int values as arguments.'
        self.x, self.y, self.z = x, y, z
    
    
    def distance(self, other) -> float:
        if type(other) is Point: return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2 + (self.z - other.z)**2)
        else: raise TypeError(f'{type_as_str(self)}.distance: cannot find distance between Point type and {type_as_str(other)} type')



if __name__ == '__main__':
    #Simple tests before running driver
    #Put your own test code here to test Point before doing bsc tests
    origin = Point(0,0,0)
    p1 = Point(1,1,1)
    p2 = Point(1,-5,7)
    # p3 = Point('a',1,3.0)
    # p4 = Point(2,1,3.0)
    print('Start simple testing')
    print(p1<5)
    # print(p1<'a')
    # print(5<p1)
    print(p1<p2)
    print(p1.distance(origin))
    print(p1>p2)
    print(p1[0])
    print(p2['y'])
    # print(p1[2.6])
    # print(p2[5])
    p2(1,2,3)
    print(p2)
    print(p1*5)
    print(5*p1)
    # print(p1+5)
    print(p1+p2)
    if p1: print('p1')
    if not origin: print('origin')
    print(p1)
    print()
    import driver
    
    driver.default_file_name = 'bscq31F18.txt'
    driver.default_show_traceback = True
    driver.default_show_exception = True
    driver.default_show_exception_message = True
    driver.driver()
